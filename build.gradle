plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
}

def mcVersion = stonecutter.current.version

version = property("mod_version") + "+" + mcVersion
group = property("maven_group")

base {
	archivesName = property("archives_base_name")
}

repositories {
	maven {
		name 'Xander Maven'
		url 'https://maven.isxander.dev/releases'
	}
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}
}

dependencies {
	minecraft "com.mojang:glissando:${mcVersion}"
	mappings "net.fabricmc:yarn:${property("yarn_mappings")}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property("loader_version")}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${property("fabric_version")}"
	modImplementation "dev.isxander:yet-another-config-lib:${property("yacl_version")}-fabric"
	modImplementation("com.terraformersmc:modmenu:${property("modmenu_version")}")
}

if (stonecutter.current.isActive) { // run configs for non-active version would be invalid
	loom {
		runConfigs.all {
			ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
			runDir "../../run" // use a global run directory for all versions
		}
		sourceSets {
			main {
				resources {
					srcDir(project.file("src/main/generated"))
				}
			}
		}
	}
}

stonecutter {
	swap("text_codec", eval(mcVersion, ">=1.20.4") ? "TextCodecs.CODEC" : "Codecs.TEXT")
	swap("button", eval(mcVersion, ">=1.20.4") ? "TextIconButtonWidget" : "TexturedButtonWidget")
	swap("payload", eval(mcVersion, ">=1.20.6") ? "TuneNoteBlockC2SPayload" : "TuneNoteBlockC2SPayloadPre1205")
	swap("on_use_with_item", eval(mcVersion, ">=1.20.6") ? "\"onUseWithItem\"" : "\"onUse\"")
	swap("identifier", eval(mcVersion, ">=1.21.1") ? "Identifier.of(namespace, path);" : "new Identifier(namespace, path);")
	swap("payload_server", eval(mcVersion, ">=1.21.1") ? "ctx.server();" : "player.server;")
	swap("instrument", eval(mcVersion, ">=1.21.1") ? "NoteBlockInstrument" : "Instrument")
	swap("shader_program", eval(mcVersion, ">=1.21.3") ? "ShaderProgramKeys.POSITION_TEX_COLOR" : "GameRenderer::getPositionTexColorProgram")
	swap("get_wrapper", eval(mcVersion, ">=1.21.3") ? "getOrThrow" : "getWrapperOrThrow")
	swap("get_registry", eval(mcVersion, ">=1.21.3") ? "getOrThrow" : "get")

	def getStateWithInstrumentWorldParam = eval(mcVersion, ">=1.21.3") ? "WorldView" : "WorldAccess"

	swap("get_state_with_instrument_world_param", getStateWithInstrumentWorldParam)
	swap("get_state_with_instrument_world_param_string", "\"$getStateWithInstrumentWorldParam\"")

}

def javaVersion = stonecutter.eval(mcVersion, ">=1.20.6") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
def javaVersionNumber = javaVersion.ordinal() + 1

tasks.register('copyDatagen', Copy) {
	from("src/main/generated")
	into("${layout.buildDirectory.get()}/resources/main")
	dependsOn("runDatagen")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
			"target": project.property("target_version"),
			"java_version": javaVersionNumber
	}
}

fabricApi {
	configureDataGeneration()
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = javaVersionNumber
}

java {
	withSourcesJar()

	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
}